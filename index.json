[{"categories":["Web3"],"content":"Puzzle, bytecode and selfdestruct!","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"1. Introduction The 29 December 2022 a challenge went public on Twitter, it was the evening and what to do after a day of full of auditing solidity contract? Eat,Sleep,Audit,Repeat? Tweet from 0x796 to launch the challenge The goal of the challenge is to steal the 0.1 ETH that are waiting on the vulnerable contract. Let‚Äôs dive into the challenge.. Obviously, the contract is not verified so we have to dive into the bytecode time to use decompilers lads! Input Data from Etherscan Here, we have to go fast because the challenge is public so first come first serve‚Ä¶ In addition, The contract size seems to be small. Let‚Äôs use dedaub this time (even if heimdall looks really promising). After using the debugger, we have the following code decompiled: function __function_selector__() public payable { v0 = BASEFEE(); if (msg.value) { require(msg.value \u003e 'iiiii' * (0x63b0beef - block.timestamp)RETURNDATASIZE(), RETURNDATASIZE()); STORAGE[msg.sender] = 4095 + block.timestamp; return MEM[(RETURNDATASIZE()) len (RETURNDATASIZE())]; } else { require((block.timestamp \u003e STORAGE[msg.sender]) \u0026 (RETURNDATASIZE() \u003c STORAGE[msg.sender])RETURNDATASIZE(), RETURNDATASIZE()); MEM[0] = (msg.data.length \u003c\u003c 232) + 0x61000080600a3d393df300000000000000000000000000000000000000000000; CALLDATACOPY(10, RETURNDATASIZE(), msg.data.length); v1 = v2 = 1 + (msg.data.length - 1 \u003e\u003e 5); do { MEM[10 + (v2 - v1 \u003c\u003c 5)] = (msg.sender | msg.sender \u003c\u003c 160) ^ MEM[10 + (v2 - v1 \u003c\u003c 5)]; v1 = v1 - 1; } while (!v1); v3 = create.code(RETURNDATASIZE(), msg.data.length + 10).value(RETURNDATASIZE()); [1] v4 = v3.delegatecall(MEM[(RETURNDATASIZE()) len (RETURNDATASIZE())], MEM[(RETURNDATASIZE()) len (RETURNDATASIZE())]).gas(msg.gas); return MEM[(RETURNDATASIZE()) len (RETURNDATASIZE())]; } } Steal the 0.1 eth without external calls? Inside the contract we don‚Äôt have any transfer(), or .call(). But, since we got a delegatecall() at the end of the code we probably need to call it. So we need to somehow find a way to trigger the delegatecall() on the address ‚ûô v3 with a EVM bytecode that permits to execute what we wants here will be to empty the contract!. If we are looking closely to the address v3, we can see that a contract is created and deployed from the the memory of the contract. v3 = create.code(RETURNDATASIZE(), msg.data.length + 10).value(RETURNDATASIZE()); Hmmm.. time to make put some malicious bytecode into this memory to create and deployed our malicious contract! So we probably need to figure out, how could we manage to deploy a malicious evm bytecode to steal the 0.1 ETH. Have to remember the famous 10M bounty from wormhole here ‚ûô Wormhole Uninitialized Proxy Bugfix Review) ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:1","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"2. Conditions bypass So for now we need to bypass the first require() . require((block.timestamp \u003e STORAGE[msg.sender]) \u0026 (RETURNDATASIZE() \u003c STORAGE[msg.sender])RETURNDATASIZE(), RETURNDATASIZE()); For this, we just need to have the storage[msg.sender] \u003e returndatasize() which will always be 0 in our case for the returndatasize() EVM gas optimization Here returndatasize() will return always 0 and will be cheaper in gas than a classic push üëÄ evm.codes ReturnDataSize Then, we need to have to bypass the following check: block.timestamp \u003e STORAGE[msg.sender]) To do, so we need to find a way to write at STORAGE[msg.sender]. Hopefully for us, we have the following the code: if (msg.value) { require(msg.value \u003e 'iiiii' * (0x63b0beef - block.timestamp)RETURNDATASIZE(), RETURNDATASIZE()); STORAGE[msg.sender] = 4095 + block.timestamp; return MEM[(RETURNDATASIZE()) len (RETURNDATASIZE())]; } If the msg.value \u003e 0 is true then the contract will overwrite the value STORAGE[msg.sender] with the block.timestamp + 4095 So, here we know we will have to make two calls: Setup the value into the storage to bypass the require() using a msg.value \u003e 0. Then recall the contract with msg.value == 0 to execute the delegatecall(). However, if we are looking closely the : STORAGE_[msg.sender] = 4095 + block.timestamp; but the check later on, compares: block.timestamp \u003e STORAGE[msg.sender] At that point, we got a problem because 4095+block.timestamp will be greater than block.timestamp. STORAGE_[msg.sender] = 4095+block.timestamp; This will be really awfull‚Ä¶ As the block.timestamp will not change during the same transaction‚Ä¶ How could we bypass this check? Patience‚Ä¶ we have to wait 4095 seconds before calling again the contract. Obviously, for debugging purposes we can use cheatcode from Foundry like vm.warp(): vm.warp(4096+block.timestamp)to jump in the future of 4096 seconds. ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:2","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"3. Bytecode We are now bypassing everything! We arriving at the interesting part. henceforth we need to craft our malicious contract to steal the ETH during the delegateCall(). The ‚Äúbase‚Äù of the evm bytecode is already made for us here: MEM[0] = (msg.data.length \u003c\u003c 232) + 0x61000080600a3d393df300000000000000000000000000000000000000000000; //The \"base\" evm is then : 0x61000080600a3d393df300000000000000000000000000000000000000000000 We got the 0xF3 at the end (stands for RETURN), so if somehow we succeed to inject the malicious bytecode after the 0xf3(RETURN). We will be rich as yannickcrypto.eth!üöÄ The msg.data is used to determine the length of our contract code. So for example, if the length is 30 bytes the contract deployed will be of 30 bytes. So just to recap, we have to use the msg.data. To use it, we will use a bytes memory using the hex keyword (e.g below). bytes memory data = hex\"4141414141414141414141414141414141414141\"; // send 20 bytes. victim.call{ gas: 1_000_000 }(data); So this the layout we have right now: 20 bytes (Base) |------------------| 61000080600a3d393df300000000000000000000000000000000000000000000 ^ This is the layout we want: 20 bytes (Base) bytes malicious to create a selfdestruct |------------------|-------------------------------------------| 61000080600a3d393df300000000000000000000000000000000000000000000 ^ The CALLDATACOPY is used to copy the data into the memory here (all the data is copied). evm.codes CALLDATACOPY So this will copy the data to the offset 10. (e.g : screenshots \u0026 explanation below). Before CALLDATACOPY this is what looks like the memory. Forge Debugger before the CallDataCopy After CALLDATACOPY here the size is 0x20 because the real payload is 32 bytes (0x20 = 32). Forge Debugger after the CallDataCopy Now, we have to dive into the weird math operation‚Ä¶ Here, I was confused with the output of the decompiler. But lucky for me, I was already familiar with this kind of xor pattern ‚Üí Reversing \u0026 crackme on x86 (PleaseSubscribe). v1 = v2 = 1 + (msg.data.length - 1 \u003e\u003e 5); do { MEM[10 + (v2 - v1 \u003c\u003c 5)] = (msg.sender | msg.sender \u003c\u003c 160) ^ MEM[10 + (v2 - v1 \u003c\u003c 5)]; v1 = v1 - 1; } while (!v1); So I guessed it.. was a xor byte per byte operation by the pattern. We will use the foundry debugger to confirm. First, we need to generate some values to prove it. Let‚Äôs use python here: Generating 0x41 on 32 bytes Now, we can add the value using the hex as previous. bytes memory data = hex\"4141414141414141414141414141414141414141414141414141414141414141\"; // hexadecimal string victim.call{ gas: 1_000_000 }(data); And now, if we move to the xor operation with the foundry debugger. Foundry Debugger showing the XOR operation This is the case!!And now, we need to use the right opcodes to not revert and execute a full self-destruct on our address to getback the ETH ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:3","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"4. SELFDESTRUCT SELFDESTRUCT SELFDESTRUCT will destroy and send all the ETH to a arbitrary address. The SELFDESTRUCT opcode is 0xFF. Let‚Äôs use evm.codes to know how to use SELFDESTRUCT ‚¨áÔ∏è evm.codes SELFDESTRUCT So our plan, will be : 1 - PUSH our address on the stack. 2 - Call the SELFDESTRUCT. 3 - Call STOP to stop the execution? Ok, we need to push our address using PUSH20 for 20 bytes (because addresses are in uint160). So, it will looks like something like: EVM Playground our malicious opcode PUSH20(0x5b73c5498c1e3b4dba84de0f1833c4a029d90519) | 0xF3 SELFDESTRUCT() | 0xFF STOP | 0x00 The final payload is: 735b73c5498c1e3b4dba84de0f1833c4a029d90519FF00 Now we have the payload we need to make win the challenge! However, we have to reminder the xor operation! So using python one last time we can xor our payload with the key. \u003e\u003e\u003e hex(0xba84de0f1833c4a029d905195b73c5498c1e3b4dba84de ^ 0x735b73c5498c1e3b4dba84de0f1833c4a029d90519FF00) '0xc9dfadca51bfda9b646381c7546bf68d2c37e248a37bde' And we got our final payload!!! 0xc9dfadca51bfda9b646381c7546bf68d2c37e248a37bde Let‚Äôs execute this one into on ETH mainnet! ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:4","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"5. Proof of Concept \u0026 Results Traces: [112757] CounterScript::run() ‚îú‚îÄ [0] VM::deal(CounterScript: [0x5b73C5498c1E3b4dbA84de0F1833c4a029d90519], 1000000000000000000) ‚îÇ ‚îî‚îÄ ‚Üê () ‚îú‚îÄ emit log_string(: ----------------------- Before Attack ----------------------------------) ‚îú‚îÄ emit log_named_uint(key: Balance of the contract, val: 1000000000000000000) ‚îú‚îÄ emit log_named_uint(key: Balance of the victim, val: 100000000000000000) ‚îú‚îÄ [22173] 0xA0Eb20483Cb60213bF944c2C3833bebc9fbc4706::fallback{value: 100000000000000000}() ‚îÇ ‚îî‚îÄ ‚Üê () ‚îú‚îÄ [0] VM::warp(1672353711) ‚îÇ ‚îî‚îÄ ‚Üê () ‚îú‚îÄ [43904] 0xA0Eb20483Cb60213bF944c2C3833bebc9fbc4706::c9dfadca(51bfda9b646381c7546bf68d2c37e248a37bde0f1833c4a029d90519) ‚îÇ ‚îú‚îÄ [6422] ‚Üí new \u003cUnknown\u003e@0x37a9B80AcC6A434d4E29D8873BaB9E471cb0d244 ‚îÇ ‚îÇ ‚îî‚îÄ ‚Üê 32 bytes of code ‚îÇ ‚îú‚îÄ [5003] 0x37a9B80AcC6A434d4E29D8873BaB9E471cb0d244::fallback() [delegatecall] ‚îÇ ‚îÇ ‚îî‚îÄ ‚Üê () ‚îÇ ‚îî‚îÄ ‚Üê () ‚îú‚îÄ emit log_string(: ----------------------- After Attack ----------------------------------) ‚îú‚îÄ emit log_named_uint(key: Balance of the contract, val: 1100000000000000000) ‚îú‚îÄ emit log_named_uint(key: Balance of the victim, val: 0) ‚îî‚îÄ ‚Üê () Script ran successfully. == Logs == ----------------------- Before Attack ---------------------------------- Balance of the contract: 1000000000000000000 Balance of the victim: 100000000000000000 ----------------------- After Attack ---------------------------------- Balance of the victim: 0 Voila! The victim contract is now holding 0 ETH! We drained all the eth from the contract :) Don‚Äôt hesitate to join us on discord, we are building a InfoSec web3 community üî• with CTFs. ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:5","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["Web3"],"content":"6. Socials \u0026 Payload Discord (Join us!) Github Twitter https://discord.gg/54Q9pnpQcV https://github.com/Ethnical/Swek3 https://twitter.com/EthnicalInfo The payload used not _clean (yet)_: ```solidity // SPDX-License-Identifier: UNLICENSED pragma solidity ^0.8.13; import \"forge-std/Script.sol\"; import \"forge-std/Test.sol\"; contract CounterScript is Script, Test { function setUp() public {} function run() public { vm.deal(address(this), 1 ether); address victim = 0xA0Eb20483Cb60213bF944c2C3833bebc9fbc4706; string memory victim_addr = \"\"; emit log_string(\" ----------------------- Before Attack ----------------------------------\"); emit log_named_uint(\"Balance of the contract\", address(this).balance); emit log_named_uint(\"Balance of the victim\", address(victim).balance); bytes memory data = hex\"c9dfadca51bfda9b646381c7546bf68d2c37e248a37bde0f1833c4a029d90519\"; // hexadecimal payload xored. victim.call{ value: 0.1 ether }(\"\"); vm.warp(block.timestamp + 10000); victim.call{ gas: 1_000_000 }(data); emit log_string(\" ----------------------- After Attack ----------------------------------\"); emit log_named_uint(\"Balance of the contract\", address(this).balance); emit log_named_uint(\"Balance of the victim\", address(victim).balance); } } Challenge Code EVM codes for retrying the challenge! **0x4861707079204e65772059656172204576657279626f647921212121212121346100ab573354803d1090421116610034573d3dfd5b69414e65f7405358584fd360801b1860801c60b01b3660e81b016000525a600a3601363d600a373360a01b331760206001360304600101805b808203602002600a01805184189052600190038061006d575050503d3df03d808080936100a0566920434f4e475241545a205b636861645d95f43d3df35b426363b0beef036469696969690234116100c3573d3dfd5b42610fff0133553d3df3** ","date":"2022-12-30","objectID":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/:0:6","tags":["PoC","EVM","Low-level","Reverse Engineerng","selfdestruct"],"title":"Challenge Twitter - EVM Puzzles \u0026 selfdestruct","uri":"/posts/twitterchallenge-puzzle-bytecode-f31ba85c800f4c42a469490f9c2378c0/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"/posts/firstpost/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"/posts/firstpost/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of ¬†Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes ¬†SCSS to ¬†CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-06","objectID":"/posts/firstpost/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don‚Äôt know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"/posts/firstpost/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/posts/firstpost/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme‚Äôs repository is: https://github.com/dillonzq/LoveIt. You can download the latest release ¬†.zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/posts/firstpost/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"ÁÆÄ‰Ωì‰∏≠Êñá\", \"Fran√ßais\", \"Polski\", ...] languageName = \"English\" # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-06","objectID":"/posts/firstpost/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-06","objectID":"/posts/firstpost/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/posts/firstpost/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more‚Ä¶ ","date":"2020-03-06","objectID":"/posts/firstpost/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"/posts/firstpost/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"ÁÆÄ‰Ωì‰∏≠Êñá\", \"Fran√ßais\", \"Polski\", ...] languageName = \"English\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = false # default amount of posts in each pages paginate = 12 # google analytics code [UA-XXXXXXXX-X] googleAnalytics = \"\" # copyright description used only for seo schema copyright = \"\" # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log enableGitInfo = true # whether to use emoji code enableEmoji = true # ignore some build errors ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [params] # site default theme [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website title for Open Graph and Twitter Cards title = \"My cool site\" # website description for RSS, SEO, Open Graph and Twitter Cards description = \"This is my cool site\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # Header config [params.header] # desktop header mode [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # mobile header mode [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"My cool site\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use","date":"2020-03-06","objectID":"/posts/firstpost/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They‚Äôre easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"/posts/firstpost/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"3.3 Style Customization Note Hugo extended version is necessary for the style customization. LoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url(\"https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext\"); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"/posts/firstpost/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language Switch ","date":"2020-03-06","objectID":"/posts/firstpost/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN Traditional Chinese zh-tw zh-TW French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi Arabic ar ar Catalan ca ca Thai th th Telugu te te Indonesian id id Turkish tr tr Korean ko ko Hindi hi hi ","date":"2020-03-06","objectID":"/posts/firstpost/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # determines default content language [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"ÊàëÁöÑÂÖ®Êñ∞ Hugo ÁΩëÁ´ô\" languageCode = \"zh-CN\" languageName = \"ÁÆÄ‰Ωì‰∏≠Êñá\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"ÊñáÁ´†\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Ê†áÁ≠æ\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"ÂàÜÁ±ª\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Fran√ßais\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" name = \"Cat√©gories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note Be aware that only translated pages are displayed in menu. It‚Äôs not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-06","objectID":"/posts/firstpost/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by ¬†making a PR to the theme! ","date":"2020-03-06","objectID":"/posts/firstpost/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"/posts/firstpost/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/posts/firstpost/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine? The following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. The official Algolia CLI is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json‚Ä¶ ","date":"2020-03-06","objectID":"/posts/firstpost/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"/posts/firstpost/"}]